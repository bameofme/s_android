<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_MEK-MIMX8QX" name="MEK-MIMX8QX" brief="This is SDK version 2.8.0 manifest file. It describes the content of the MEK-MIMX8QX and additional settings for tools that support SDK version 2.8.0" format_version="3.6" api_version="2.0.0" configuration="28a3031335681a6e9bc832bbace7298f" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.6.xsd">
  <!--Timestamp (UTC): 2020-04-23 09:09:37.875716-->
  <!--This manifest is generated based on sdk repo commit: HEAD-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="com.crt.advproject.config.exe.debug"/>
    <definition extID="com.crt.advproject.config.exe.release"/>
    <definition extID="QSPI_FLASH_MIMX8QX6xxxFZ"/>
  </externalDefinitions>
  <ksdk id="MCUXpresso280" name="MCUXpresso280" version="2.8.0" revision="Stage 827 2020-04-22"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings/>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="8.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
  </toolchains>
  <boards>
    <board id="mekmimx8qx" name="MEK-MIMX8QX" href="https://www.nxp.com/pip/MCIMX8QXP-CPU" version="1.0.0" package="MIMX8QX6AVLFZ">
      <description>The mekmimx8qx is an development platform for MIMX8QX MCUs</description>
      <image path="MIR/marketing_data/1.0/boards/images" type="image">
        <files mask="90-MEK-MIMX8QX.gif"/>
      </image>
      <examples>
        <example id="mekmimx8qx_canfd_interrupt_transfer" name="canfd_interrupt_transfer" brief="The canfd_interrupt example shows how to use FlexCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when user press space key in terminal. Endpoint B receive the message, printthe message content to terminal and echo back the message. Endpoint A will increase the receivedmessage and waiting for the next transmission of the user initiated." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/canfd" path="boards/mekmimx8qx/driver_examples/canfd/interrupt_transfer">
          <external path="boards/mekmimx8qx/driver_examples/canfd/interrupt_transfer" type="xml">
            <files mask="canfd_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_canfd_loopback" name="canfd_loopback" brief="The canfd_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/canfd" path="boards/mekmimx8qx/driver_examples/canfd/loopback">
          <external path="boards/mekmimx8qx/driver_examples/canfd/loopback" type="xml">
            <files mask="canfd_loopback.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_canfd_loopback_transfer" name="canfd_loopback_transfer" brief="The canfd_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/canfd" path="boards/mekmimx8qx/driver_examples/canfd/loopback_transfer">
          <external path="boards/mekmimx8qx/driver_examples/canfd/loopback_transfer" type="xml">
            <files mask="canfd_loopback_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_cmsis_lpi2c_edma_b2b_transfer_master" name="cmsis_lpi2c_edma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="boards/mekmimx8qx/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="boards/mekmimx8qx/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_cmsis_lpi2c_edma_b2b_transfer_slave" name="cmsis_lpi2c_edma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="boards/mekmimx8qx/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="boards/mekmimx8qx/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_cmsis_lpi2c_int_b2b_transfer_master" name="cmsis_lpi2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="boards/mekmimx8qx/cmsis_driver_examples/lpi2c/int_b2b_transfer/master">
          <external path="boards/mekmimx8qx/cmsis_driver_examples/lpi2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_cmsis_lpi2c_int_b2b_transfer_slave" name="cmsis_lpi2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="boards/mekmimx8qx/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave">
          <external path="boards/mekmimx8qx/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_cmsis_lpuart_edma_transfer" name="cmsis_lpuart_edma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="boards/mekmimx8qx/cmsis_driver_examples/lpuart/edma_transfer">
          <external path="boards/mekmimx8qx/cmsis_driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="cmsis_lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_cmsis_lpuart_interrupt_transfer" name="cmsis_lpuart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="boards/mekmimx8qx/cmsis_driver_examples/lpuart/interrupt_transfer">
          <external path="boards/mekmimx8qx/cmsis_driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_dma3_memory_to_memory" name="dma3_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="boards/mekmimx8qx/driver_examples/edma/memory_to_memory">
          <external path="boards/mekmimx8qx/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="dma3_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_dma3_scatter_gather" name="dma3_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="boards/mekmimx8qx/driver_examples/edma/scatter_gather">
          <external path="boards/mekmimx8qx/driver_examples/edma/scatter_gather" type="xml">
            <files mask="dma3_scatter_gather.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_dpu_blitblend" name="dpu_blitblend" brief="In this project, the safety stream and content stream are both displayed.safety stream on the left part, content stream on the right part.The blit engine generates the frame buffers, the blend modes are differentfor safety stream and content stream.For each stream, there are 5 rectangles, 4 of them are fixed (red, green, blue,and white) and 1 of them is floating (yellow). When the floating rectangleoverlay occurs, the blend modes are different for safety stream and contentstream. For the left part, the overlay color is fixed rectangle adds floatingrectangle. For the right part, the overlay color is fixed rectangle subtractsthe floating rectangle.In this project, the blit engine shadow register feature is used. Newconfiguration is written to the registers during the previous process isstill on-going. The pipline sequence completed interrupt is used to make sureall pending process finished when necessary." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dpu" path="boards/mekmimx8qx/driver_examples/dpu/blitblend">
          <external path="boards/mekmimx8qx/driver_examples/dpu/blitblend" type="xml">
            <files mask="dpu_blitblend.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_dpu_character" name="dpu_character" brief="The DPU Character example shows how to use the DPU driver to show characters. In this example, the fetch decode is used to fetch frame buffer to show. Two frame buffers are used, CPU fills the inactive frame buffer DPU shows the active frame buffer. When the example runs, you can see character changing in the middle of the screen." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dpu" path="boards/mekmimx8qx/driver_examples/dpu/character">
          <external path="boards/mekmimx8qx/driver_examples/dpu/character" type="xml">
            <files mask="dpu_character.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_dpu_fetch_decode" name="dpu_fetch_decode" brief="The DPU Fetch Decode example shows how to use the DPU driver to enable fetch decoderunit and the scaler. The fetch decoder output frame size is smaller than desiredoutput, so the scaler units are used for the frame size convert.In this example, the screen is divided to two parts, one for content stream, andthe other for safty stream.If this example runs success, rectangles will move in the screen." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dpu" path="boards/mekmimx8qx/driver_examples/dpu/fetch_decode">
          <external path="boards/mekmimx8qx/driver_examples/dpu/fetch_decode" type="xml">
            <files mask="dpu_fetch_decode.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_dpu_rop" name="dpu_rop" brief="This example shows how to use the ROP unit in blit engine. In this project,there are three input frame buffers to the blit engine. The blit enginegenerates two frames using different ROP configurations, so the output framesare different.For landscape display panel:Output frame 0  +------------------+------------------+------------------+  |                  |                  |                  |  |   Red            |    Yellow        |      Green       |  |                  |                  |                  |  |                  |                  |                  |  |        +--------------------------------------+        |  |        |         |                  |         |        |  |        | Magenta |    White         |  Cyan   |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  +--------|---------+------------------+------------------+  |        |                                      |        |  | Black  |                                      | Black  |  |        |              Blue                    |        |  |        |                                      |        |  +--------+--------------------------------------+--------+Output frame 1  +------------------+------------------+------------------+  |                  |                  |                  |  |   Cyan           |    Blue          |    Magenta       |  |                  |                  |                  |  |                  |                  |                  |  |        +--------------------------------------+        |  |        |         |                  |         |        |  |        |  Green  |    Black         |  Red    |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  +--------|---------+------------------+------------------+  |        |                                      |        |  | White  |                                      | White  |  |        |              Yellow                  |        |  |        |                                      |        |  +--------+--------------------------------------+--------+For portrait display panel:Output frame 0  +------------------+------------------+------------------+  |                  |                  |                  |  |   Red            |    Yellow        |      Green       |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |        +--------------------------------------+        |  |        |         |                  |         |        |  |        | Magenta |    White         |  Cyan   |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  +--------|---------+------------------+------------------+  |        |                                      |        |  | Black  |                                      | Black  |  |        |              Blue                    |        |  |        |                                      |        |  |        |                                      |        |  |        |                                      |        |  |        |                                      |        |  +--------+--------------------------------------+--------+Output frame 1  +------------------+------------------+------------------+  |                  |                  |                  |  |   Cyan           |    Blue          |    Magenta       |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |        +--------------------------------------+        |  |        |         |                  |         |        |  |        |  Green  |    Black         |  Red    |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  +--------|---------+------------------+------------------+  |        |                                      |        |  | White  |                                      | White  |  |        |              Yellow                  |        |  |        |                                      |        |  |        |                                      |        |  |        |                                      |        |  |        |                                      |        |  +--------+--------------------------------------+--------+The two frames are shown one by one. Because the switch intervalis controlled by an software loop delay, so the interval might be differentfor debug target and release target.In this project, a new blit engine process is started only when the previousframe finished." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dpu" path="boards/mekmimx8qx/driver_examples/dpu/rop">
          <external path="boards/mekmimx8qx/driver_examples/dpu/rop" type="xml">
            <files mask="dpu_rop.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_enet_txrx_multiring_transfer" name="enet_txrx_multiring_transfer" brief="The enet_txrx_multiring_transfer example shows the way to use ENET driver to   receive and transmit avb frame in the avb feature supported multi-ring platforms. this example is only supported in multi-ring platform.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to transmit frames in avb supported multiple-ring platforms.The example transmits 30 number frames. For simple demo, we create frames with some special definition.1. Build transmission frames with broadcast mac address.2. Build different frames for each ring: 10 normal ethernet frame, 10 similar IEC 61883-6 type frames,10 similar IEC 61883-8 type frames and the two IEC 1722 avb frames are set with different vlan priority . Notice, To simply show how to use three different rings in rx/tx on one board. This example set PHY local loop and you will see there will be PHY init auto-negotiation fail and this is normal. because phy can not finishauto-negotiation when phy is in loop back mode. However, the auto-negotiation fail has no impact on this loop back example, so just forget about the failure auto-negotiation." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="boards/mekmimx8qx/driver_examples/enet/txrx_multiring_transfer">
          <external path="boards/mekmimx8qx/driver_examples/enet/txrx_multiring_transfer" type="xml">
            <files mask="enet_txrx_multiring_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_enet_txrx_ptp1588_transfer" name="enet_txrx_ptp1588_transfer" brief="The enet_rxtx_ptp1588 example shows the way to use ENET driver to   receive and transmit frame in the 1588 feature required cases.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.3. How to add to the multicast group to receive PTP 1588 message.4. How to get the time stamp of the PTP 1588 timer.4. How to use Get the ENET transmit and receive frame time stamp.The example transmits 20 number PTP event frame, shows the timestamp of the transmitted frame.The length, source MAC address and destination MAC address of the received frame will be print. The time stamp of the received timestamp will be print when the PTP message frame is received. Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. you can change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="boards/mekmimx8qx/driver_examples/enet/txrx_ptp1588_transfer">
          <external path="boards/mekmimx8qx/driver_examples/enet/txrx_ptp1588_transfer" type="xml">
            <files mask="enet_txrx_ptp1588_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_enet_txrx_transfer" name="enet_txrx_transfer" brief="The enet_rxtx example shows the simplest way to use ENET driver for simple frame receive and transmit.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.The example transmits 20 number broadcast frame, print the frame length, source MAC addressand destination MAC address when receive frame.Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. youcan change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="boards/mekmimx8qx/driver_examples/enet/txrx_transfer">
          <external path="boards/mekmimx8qx/driver_examples/enet/txrx_transfer" type="xml">
            <files mask="enet_txrx_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_esai_edma_transfer" name="esai_edma_transfer" brief="The esai_edma_transfer example shows how to use esai driver with edma:In this example, one esai instance playbacks the audio data recorded by the same esai instance using edma." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/esai" path="boards/mekmimx8qx/driver_examples/esai/edma_transfer">
          <external path="boards/mekmimx8qx/driver_examples/esai/edma_transfer" type="xml">
            <files mask="esai_edma_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_esai_interrupt_transfer" name="esai_interrupt_transfer" brief="The esai_interrupt_transfer example shows how to use esai driver with interrupt:In this example, one esai instance playbacks the audio data recorded by the same esai instance using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/esai" path="boards/mekmimx8qx/driver_examples/esai/interrupt_transfer">
          <external path="boards/mekmimx8qx/driver_examples/esai/interrupt_transfer" type="xml">
            <files mask="esai_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_flexcan_interrupt_transfer" name="flexcan_interrupt_transfer" brief="The flexcan_interrupt example shows how to use FlexCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when user press space key in terminal. Endpoint B receive the message, printthe message content to terminal and echo back the message. Endpoint A will increase the receivedmessage and waiting for the next transmission of the user initiated." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/mekmimx8qx/driver_examples/flexcan/interrupt_transfer">
          <external path="boards/mekmimx8qx/driver_examples/flexcan/interrupt_transfer" type="xml">
            <files mask="flexcan_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_flexcan_loopback" name="flexcan_loopback" brief="The flexcan_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/mekmimx8qx/driver_examples/flexcan/loopback">
          <external path="boards/mekmimx8qx/driver_examples/flexcan/loopback" type="xml">
            <files mask="flexcan_loopback.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_flexcan_loopback_edma_transfer" name="flexcan_loopback_edma_transfer" brief="The flexcan_loopback_edma example shows how to use the EDMA version transactional driver to receiveCAN Message from Rx FIFO:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Tx Message Buffer and also setup Rx FIFO. After that, the example will send 4 CAN Messagesfrom Tx Message Buffer to Rx FIFO through internal loopback interconnect and read them out usingEDMA version FlexCAN transactional driver. The Sent and received message will be print out to terminalat last." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/mekmimx8qx/driver_examples/flexcan/loopback_edma_transfer">
          <external path="boards/mekmimx8qx/driver_examples/flexcan/loopback_edma_transfer" type="xml">
            <files mask="flexcan_loopback_edma_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_flexcan_loopback_transfer" name="flexcan_loopback_transfer" brief="The flexcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="boards/mekmimx8qx/driver_examples/flexcan/loopback_transfer">
          <external path="boards/mekmimx8qx/driver_examples/flexcan/loopback_transfer" type="xml">
            <files mask="flexcan_loopback_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_flexspi_octal_polling_transfer" name="flexspi_octal_polling_transfer" brief="The flexspi_octal_polling_transfer example shows how to use flexspi driver with polling:In this example, flexspi will send data and operate the external octal flash connected with FLEXSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and program a page into the flash, at last check if the data in flash is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexspi" path="boards/mekmimx8qx/driver_examples/flexspi/octal/polling_transfer">
          <external path="boards/mekmimx8qx/driver_examples/flexspi/octal/polling_transfer" type="xml">
            <files mask="flexspi_octal_polling_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="boards/mekmimx8qx/rtos_examples/freertos_event">
          <external path="boards/mekmimx8qx/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="boards/mekmimx8qx/rtos_examples/freertos_generic">
          <external path="boards/mekmimx8qx/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="boards/mekmimx8qx/rtos_examples/freertos_hello">
          <external path="boards/mekmimx8qx/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_freertos_lpuart" name="freertos_lpuart" brief="The LPUART example for FreeRTOS demonstrates the possibility to use the LPUART driver in the RTOS.The example uses single instance of LPUART IP and writes string into, then reads back chars.After every 4B received, these are sent back on LPUART." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="boards/mekmimx8qx/rtos_examples/freertos_lpuart">
          <external path="boards/mekmimx8qx/rtos_examples/freertos_lpuart" type="xml">
            <files mask="freertos_lpuart.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="boards/mekmimx8qx/rtos_examples/freertos_mutex">
          <external path="boards/mekmimx8qx/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="boards/mekmimx8qx/rtos_examples/freertos_queue">
          <external path="boards/mekmimx8qx/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="boards/mekmimx8qx/rtos_examples/freertos_sem">
          <external path="boards/mekmimx8qx/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="boards/mekmimx8qx/rtos_examples/freertos_swtimer">
          <external path="boards/mekmimx8qx/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using GPT module." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="boards/mekmimx8qx/rtos_examples/freertos_tickless">
          <external path="boards/mekmimx8qx/rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_ftm_combine_pwm" name="ftm_combine_pwm" brief="The FTM project is a demonstration program of generating a combined PWM signal by the SDK FTM driver. It sets up the FTMhardware block to output PWM signals on two TPM channels. The example also shows the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the FTM pins, the user will see a change in LED brightness.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/mekmimx8qx/driver_examples/ftm/combine_pwm">
          <external path="boards/mekmimx8qx/driver_examples/ftm/combine_pwm" type="xml">
            <files mask="ftm_combine_pwm.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_ftm_dual_edge_capture" name="ftm_dual_edge_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a FTM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/mekmimx8qx/driver_examples/ftm/dual_edge_capture">
          <external path="boards/mekmimx8qx/driver_examples/ftm/dual_edge_capture" type="xml">
            <files mask="ftm_dual_edge_capture.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_ftm_input_capture" name="ftm_input_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's input capture feature.The example sets up a FTM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/mekmimx8qx/driver_examples/ftm/input_capture">
          <external path="boards/mekmimx8qx/driver_examples/ftm/input_capture" type="xml">
            <files mask="ftm_input_capture.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_ftm_output_compare" name="ftm_output_compare" brief="The FTM project is a demonstration program of the SDK FTM driver's output compare feature.It sets up one FTM channel to toggle the output when a match occurs with the channel value. The usershould probe the FTM output with a oscilloscope to see the signal toggling." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/mekmimx8qx/driver_examples/ftm/output_compare">
          <external path="boards/mekmimx8qx/driver_examples/ftm/output_compare" type="xml">
            <files mask="ftm_output_compare.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_ftm_pwm_twochannel" name="ftm_pwm_twochannel" brief="The FTM pwm two channel Example project is a demonstration program that uses the KSDK software to generate a square pulse PWM on 2 channel to control the LED brightness.- FTM generates a PWM with the increasing and decreasing duty cycle.- LED brightness is increasing and then dimming. This is a continuous process." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/mekmimx8qx/driver_examples/ftm/pwm_twochannel">
          <external path="boards/mekmimx8qx/driver_examples/ftm/pwm_twochannel" type="xml">
            <files mask="ftm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_ftm_simple_pwm" name="ftm_simple_pwm" brief="The FTM project is a simple demonstration program of the SDK FTM driver. It sets up the FTMhardware block to output a center-aligned PWM signal. The PWM dutycycle is periodically updated.On boards that have an LED connected to the FTM pins, the user will see a change in LED brightness." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/mekmimx8qx/driver_examples/ftm/simple_pwm">
          <external path="boards/mekmimx8qx/driver_examples/ftm/simple_pwm" type="xml">
            <files mask="ftm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="boards/mekmimx8qx/driver_examples/ftm/timer">
          <external path="boards/mekmimx8qx/driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_gpt_capture" name="gpt_capture" brief="The gpt_capture project is a simple demonstration program of the SDK GPT driver's input capture feature.The example sets up a GPT channel for rise-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpt" path="boards/mekmimx8qx/driver_examples/gpt/capture">
          <external path="boards/mekmimx8qx/driver_examples/gpt/capture" type="xml">
            <files mask="gpt_capture.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_gpt_timer" name="gpt_timer" brief="The gpt_timer project is a simple demonstration program of the SDK GPT driver. It sets up the GPThardware block to trigger a periodic interrupt after every 1 second. When the GPT interrupt is triggereda message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpt" path="boards/mekmimx8qx/driver_examples/gpt/timer">
          <external path="boards/mekmimx8qx/driver_examples/gpt/timer" type="xml">
            <files mask="gpt_timer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/mekmimx8qx/demo_apps/hello_world">
          <external path="boards/mekmimx8qx/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_igpio_led_output" name="igpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="boards/mekmimx8qx/driver_examples/gpio/led_output">
          <external path="boards/mekmimx8qx/driver_examples/gpio/led_output" type="xml">
            <files mask="igpio_led_output.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_intmux" name="intmux" brief="This example shows how to use INTMUX to route the internel interrupt to the system.In this example, one of the INTMUX input source(such as LPIT, TPM) is used to generate internel interrupt.The internel interrupt is outputted to system through INTMUX. Then the interrupt is handled by IRQSTEER, whichlocated outside of the CM4 subsystem." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/mekmimx8qx/driver_examples/intmux">
          <external path="boards/mekmimx8qx/driver_examples/intmux" type="xml">
            <files mask="intmux.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_isi_ci_pi_yuv422" name="isi_ci_pi_yuv422" brief="This example shows how to use ISI to receive camera frame through CI_PI.In this example, the camera input frame is YUV422 format and ISI output frameis RGB656 format. The output frame is shown in the screen.NOTE:This example must run continously to get the right result, breaking during debugwill results to display tearing. Because the ISI driver maintains IP state throughISR, if the core is halted, then driver state does not match the IP state. Whenexiting debug, the core might be halted for a short while, so the tearing mayhappen when exiting debug.If the camera and LCD panel resolutions are not the same, then only part of thecamera frame will be shown." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/isi/ci_pi/yuv422" path="boards/mekmimx8qx/driver_examples/isi/ci_pi/yuv422">
          <external path="boards/mekmimx8qx/driver_examples/isi/ci_pi/yuv422" type="xml">
            <files mask="isi_ci_pi_yuv422.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_isi_mipi_csi2_rgb565" name="isi_mipi_csi2_rgb565" brief="This example shows how to use ISI to receive camera frame through MIPI CSI2.In this example, the camera input frame and ISI output frame are both RGB656format. The output frame is shown in the screen.NOTE:This example must run continously to get the right result, breaking during debugwill results to display tearing. Because the ISI driver maintains IP state throughISR, if the core is halted, then driver state does not match the IP state. Whenexiting debug, the core might be halted for a short while, so the tearing mayhappen when exiting debug.If the camera and LCD panel resolutions are not the same, then only part of thecamera frame will be shown." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/isi/mipi_csi2/rgb565" path="boards/mekmimx8qx/driver_examples/isi/mipi_csi2/rgb565">
          <external path="boards/mekmimx8qx/driver_examples/isi/mipi_csi2/rgb565" type="xml">
            <files mask="isi_mipi_csi2_rgb565.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_isi_mipi_csi2_yuv422" name="isi_mipi_csi2_yuv422" brief="This example shows how to use ISI to receive camera frame through MIPI CSI2.In this example, the camera input frame is YUV422 format and ISI output frameis RGB656 format. The output frame is shown in the screen.NOTE:This example must run continously to get the right result, breaking during debugwill results to display tearing. Because the ISI driver maintains IP state throughISR, if the core is halted, then driver state does not match the IP state. Whenexiting debug, the core might be halted for a short while, so the tearing mayhappen when exiting debug.If the camera and LCD panel resolutions are not the same, then only part of thecamera frame will be shown." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/isi/mipi_csi2/yuv422" path="boards/mekmimx8qx/driver_examples/isi/mipi_csi2/yuv422">
          <external path="boards/mekmimx8qx/driver_examples/isi/mipi_csi2/yuv422" type="xml">
            <files mask="isi_mipi_csi2_yuv422.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpadc_interrupt" name="lpadc_interrupt" brief="The lpadc_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="boards/mekmimx8qx/driver_examples/lpadc/interrupt">
          <external path="boards/mekmimx8qx/driver_examples/lpadc/interrupt" type="xml">
            <files mask="lpadc_interrupt.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpadc_polling" name="lpadc_polling" brief="The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="boards/mekmimx8qx/driver_examples/lpadc/polling">
          <external path="boards/mekmimx8qx/driver_examples/lpadc/polling" type="xml">
            <files mask="lpadc_polling.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpi2c_edma_b2b_transfer_master" name="lpi2c_edma_b2b_transfer_master" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/mekmimx8qx/driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="boards/mekmimx8qx/driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpi2c_edma_b2b_transfer_slave" name="lpi2c_edma_b2b_transfer_slave" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/mekmimx8qx/driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="boards/mekmimx8qx/driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpi2c_interrupt_b2b_transfer_master" name="lpi2c_interrupt_b2b_transfer_master" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/mekmimx8qx/driver_examples/lpi2c/interrupt_b2b_transfer/master">
          <external path="boards/mekmimx8qx/driver_examples/lpi2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpi2c_interrupt_b2b_transfer_slave" name="lpi2c_interrupt_b2b_transfer_slave" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/mekmimx8qx/driver_examples/lpi2c/interrupt_b2b_transfer/slave">
          <external path="boards/mekmimx8qx/driver_examples/lpi2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpi2c_polling_b2b_master" name="lpi2c_polling_b2b_master" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/mekmimx8qx/driver_examples/lpi2c/polling_b2b/master">
          <external path="boards/mekmimx8qx/driver_examples/lpi2c/polling_b2b/master" type="xml">
            <files mask="lpi2c_polling_b2b_master.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpi2c_polling_b2b_slave" name="lpi2c_polling_b2b_slave" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/mekmimx8qx/driver_examples/lpi2c/polling_b2b/slave">
          <external path="boards/mekmimx8qx/driver_examples/lpi2c/polling_b2b/slave" type="xml">
            <files mask="lpi2c_polling_b2b_slave.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpi2c_read_accel_value_transfer" name="lpi2c_read_accel_value_transfer" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="boards/mekmimx8qx/driver_examples/lpi2c/read_accel_value_transfer">
          <external path="boards/mekmimx8qx/driver_examples/lpi2c/read_accel_value_transfer" type="xml">
            <files mask="lpi2c_read_accel_value_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpit_single_channel" name="lpit_single_channel" brief="The LPIT single channel project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpit" path="boards/mekmimx8qx/driver_examples/lpit/single_channel">
          <external path="boards/mekmimx8qx/driver_examples/lpit/single_channel" type="xml">
            <files mask="lpit_single_channel.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/mekmimx8qx/driver_examples/lpuart/edma_transfer">
          <external path="boards/mekmimx8qx/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/mekmimx8qx/driver_examples/lpuart/interrupt">
          <external path="boards/mekmimx8qx/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/mekmimx8qx/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="boards/mekmimx8qx/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/mekmimx8qx/driver_examples/lpuart/interrupt_transfer">
          <external path="boards/mekmimx8qx/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="boards/mekmimx8qx/driver_examples/lpuart/polling">
          <external path="boards/mekmimx8qx/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/mekmimx8qx/demo_apps/power_mode_switch">
          <external path="boards/mekmimx8qx/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_rgpio_led_output" name="rgpio_led_output" brief="The RGPIO Example project is a demonstration program that uses the SDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/rgpio" path="boards/mekmimx8qx/driver_examples/rgpio/led_output">
          <external path="boards/mekmimx8qx/driver_examples/rgpio/led_output" type="xml">
            <files mask="rgpio_led_output.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_rpmsg_lite_pingpong_rtos_linux_remote" name="rpmsg_lite_pingpong_rtos_linux_remote" brief="The Multicore RPMsg-Lite pingpong RTOS project is a simple demonstration program that uses theMCUXpresso SDK software and the RPMsg-Lite library and shows how to implement the inter-corecommunicaton between cores of the multicore system. The primary core releases the secondary corefrom the reset and then the inter-core communication is established. Once the RPMsg is initializedand endpoints are created the message exchange starts, incrementing a virtual counter that is partof the message payload. The message pingpong finishes when the counter reaches the value of 100.Then the RPMsg-Lite is deinitialized and the procedure of the data exchange is repeated again.Shared memory usageThis multicore example uses the shared memory for data exchange. The shared memory region isdefined and the size can be adjustable in the linker file. The shared memory region start addressand the size have to be defined in linker file for each core equally. The shared memory startaddress is then exported from the linker to the application." toolchain="armgcc" compiler="compiler_gcc" category="multicore_examples" path="boards/mekmimx8qx/multicore_examples/rpmsg_lite_pingpong_rtos/linux_remote">
          <external path="boards/mekmimx8qx/multicore_examples/rpmsg_lite_pingpong_rtos/linux_remote" type="xml">
            <files mask="rpmsg_lite_pingpong_rtos_linux_remote.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_rpmsg_lite_str_echo_rtos_imxcm4" name="rpmsg_lite_str_echo_rtos_imxcm4" brief="The Multicore RPMsg-Lite string echo project is a simple demonstration program that uses theMCUXpresso SDK software and the RPMsg-Lite library and shows how to implement the inter-corecommunicaton between cores of the multicore system.It works with Linux RPMsg master peer to transfer string content back and forth. The name servicehandshake is performed first to create the communication channels. Next, Linux OS waits for userinput to the RPMsg virtual tty. Anything which is received is sent to M4. M4 displays what isreceived, and echoes back the same message as an acknowledgement. The tty reader on the Linux sidecan get the message, and start another transaction. The demo demonstrates RPMsg’s ability to sendarbitrary content back and forth. Note: The maximum message length supported by RPMsg is now 496bytes. String longer than 496 will be divided by virtual tty into several messages.Shared memory usageThis multicore example uses the shared memory for data exchange. The shared memory region isdefined and the size can be adjustable in the linker file. The shared memory region start addressand the size have to be defined in linker file for each core equally. The shared memory startaddress is then exported from the linker to the application." toolchain="armgcc" compiler="compiler_gcc" category="multicore_examples" path="boards/mekmimx8qx/multicore_examples/rpmsg_lite_str_echo_rtos">
          <external path="boards/mekmimx8qx/multicore_examples/rpmsg_lite_str_echo_rtos" type="xml">
            <files mask="rpmsg_lite_str_echo_rtos_imxcm4.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_sai_edma_transfer" name="sai_edma_transfer" brief="The sai_edma_transfer example shows how to use sai driver with EDMA:In this example, one sai instance playbacks the audio data stored in flash/SRAM using EDMA channel." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="boards/mekmimx8qx/driver_examples/sai/edma_transfer">
          <external path="boards/mekmimx8qx/driver_examples/sai/edma_transfer" type="xml">
            <files mask="sai_edma_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_sai_interrupt" name="sai_interrupt" brief="The sai_interrupt example shows how to use sai functional API to implement interrupt playback:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="boards/mekmimx8qx/driver_examples/sai/interrupt">
          <external path="boards/mekmimx8qx/driver_examples/sai/interrupt" type="xml">
            <files mask="sai_interrupt.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_sai_interrupt_transfer" name="sai_interrupt_transfer" brief="The sai_interrupt_transfer example shows how to use sai driver with interrupt:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="boards/mekmimx8qx/driver_examples/sai/interrupt_transfer">
          <external path="boards/mekmimx8qx/driver_examples/sai/interrupt_transfer" type="xml">
            <files mask="sai_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_sema42_uboot" name="sema42_uboot" brief="The sema42 uboot example shows how to use SEMA42 driver to lock and unlock a sema gate.This example should work together with uboot. This example runs on Cortex-M core,the uboot runs on the Cortex-A core." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sema42" path="boards/mekmimx8qx/driver_examples/sema42/uboot">
          <external path="boards/mekmimx8qx/driver_examples/sema42/uboot" type="xml">
            <files mask="sema42_uboot.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_srtm_demo" name="srtm_demo" brief="TBD" toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="boards/mekmimx8qx/demo_apps/srtm_demo">
          <external path="boards/mekmimx8qx/demo_apps/srtm_demo" type="xml">
            <files mask="srtm_demo.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_tpm_dual_edge_capture" name="tpm_dual_edge_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/mekmimx8qx/driver_examples/tpm/dual_edge_capture">
          <external path="boards/mekmimx8qx/driver_examples/tpm/dual_edge_capture" type="xml">
            <files mask="tpm_dual_edge_capture.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_tpm_input_capture" name="tpm_input_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/mekmimx8qx/driver_examples/tpm/input_capture">
          <external path="boards/mekmimx8qx/driver_examples/tpm/input_capture" type="xml">
            <files mask="tpm_input_capture.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_tpm_output_compare" name="tpm_output_compare" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/mekmimx8qx/driver_examples/tpm/output_compare">
          <external path="boards/mekmimx8qx/driver_examples/tpm/output_compare" type="xml">
            <files mask="tpm_output_compare.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_tpm_pwm_twochannel" name="tpm_pwm_twochannel" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/mekmimx8qx/driver_examples/tpm/pwm_twochannel">
          <external path="boards/mekmimx8qx/driver_examples/tpm/pwm_twochannel" type="xml">
            <files mask="tpm_pwm_twochannel.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_tpm_simple_pwm" name="tpm_simple_pwm" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/mekmimx8qx/driver_examples/tpm/simple_pwm">
          <external path="boards/mekmimx8qx/driver_examples/tpm/simple_pwm" type="xml">
            <files mask="tpm_simple_pwm.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_tpm_timer" name="tpm_timer" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="boards/mekmimx8qx/driver_examples/tpm/timer">
          <external path="boards/mekmimx8qx/driver_examples/tpm/timer" type="xml">
            <files mask="tpm_timer.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_tstmr" name="tstmr" brief="The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/mekmimx8qx/driver_examples/tstmr">
          <external path="boards/mekmimx8qx/driver_examples/tstmr" type="xml">
            <files mask="tstmr.xml"/>
          </external>
        </example>
        <example id="mekmimx8qx_wdog32" name="wdog32" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="boards/mekmimx8qx/driver_examples/wdog32">
          <external path="boards/mekmimx8qx/driver_examples/wdog32" type="xml">
            <files mask="wdog32.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MIMX8QX6xxxFZ" name="MIMX8QX6" version="1.0.0" full_name="MIMX8QX6xxxFZ" family="MIMX8QXx" platform="i.MX">
      <description>MIMX8QX6</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="cm4_MIMX8QX6xxxFZ" name="cm4" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="SRAM_UPPER_MIMX8QX6xxxFZ" name="SRAM_UPPER" addr="20000000" size="00020000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MIMX8QX6xxxFZ" name="SRAM_LOWER" addr="1ffe0000" size="00020000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="0" ram_size_kb="256"/>
      <package id="MIMX8QX6AVLFZ" name="MIMX8QX6AVLFZ"/>
      <evaluation_boards>
        <evaluation_board name="mekmimx8qx"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.attach.slave.release.MIMX8QX6xxxFZ" name="internal.attach.slave" value="true"/>
            <params id="internal.multi.swd.release.MIMX8QX6xxxFZ" name="internal.multi.swd" value="true"/>
            <params id="internal.wiretype.release.MIMX8QX6xxxFZ" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MIMX8QX6xxxFZ" name="internal.has_swo" value="false"/>
          </params>
          <drivers>
            <driver id_refs="QSPI_FLASH_MIMX8QX6xxxFZ">
              <driverBinary type="binary">
                <files mask="flash_driver_placeholder.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.mekmimx8qx.MIMX8QX6" name="mekmimx8qx" brief="Board_project_template mekmimx8qx" version="1.0.0" full_name="Board_project_template mekmimx8qx" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="device.MIMX8QX6_CMSIS.MIMX8QX6"/>
          <component_dependency value="device.MIMX8QX6_startup.MIMX8QX6"/>
          <component_dependency value="platform.drivers.lpuart.MIMX8QX6"/>
          <component_dependency value="platform.drivers.igpio.MIMX8QX6"/>
          <component_dependency value="platform.utilities.assert.MIMX8QX6"/>
          <component_dependency value="utility.debug_console.MIMX8QX6"/>
          <component_dependency value="component.lpuart_adapter.MIMX8QX6"/>
          <component_dependency value="component.serial_manager.MIMX8QX6"/>
          <component_dependency value="component.lists.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="boards/mekmimx8qx/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="boards/mekmimx8qx/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MIMX8QX6" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="MIMX8QX6xxxFZ" user_visible="true" type="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="platform.Include_dsp.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="core_cm1.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm3.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm7.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_sc300.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source path="CMSIS" target_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS">
      <source path="CMSIS/Driver/DriverTemplates" target_path="Driver/DriverTemplates" type="src">
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_USBD.c"/>
        <files mask="Driver_USBH.c"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MIMX8QX6" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8QX6" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MIMX8QX6" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MIMX8QX6" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MIMX8QX6" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMX8QX6" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MIMX8QX6" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MIMX8QX6" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MIMX8QX6" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMX8QX6" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMX8QX6" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8QX6" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MIMX8QX6" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MIMX8QX6" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MIMX8QX6" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="MIMX8QX6xxxFZ" user_visible="false" type="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QX6"/>
      </dependencies>
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
    </component>
    <component id="platform.Include_common.MIMX8QX6" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="MIMX8QX6xxxFZ" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm4.MIMX8QX6" name="CMSIS_Include_core_cm4" brief="Cmsis_include_core_cm4" version="5.3.0" full_name="Cmsis_include_core_cm4" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MIMX8QX6"/>
          <component_dependency value="platform.Include_dsp.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm4.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
    </component>
    <component id="platform.Include_dsp.MIMX8QX6" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="MIMX8QX6xxxFZ" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
    </component>
    <component id="project_template.MIMX8QX6.MIMX8QX6" name="MIMX8QX6" brief="Devices_project_template MIMX8QX6" version="1.0.0" full_name="Devices_project_template MIMX8QX6" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MIMX8QX6"/>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="device.MIMX8QX6_CMSIS.MIMX8QX6"/>
          <component_dependency value="device.MIMX8QX6_startup.MIMX8QX6"/>
          <component_dependency value="platform.drivers.lpuart.MIMX8QX6"/>
          <component_dependency value="platform.drivers.igpio.MIMX8QX6"/>
          <component_dependency value="platform.drivers.scfwapi.MIMX8QX6"/>
          <component_dependency value="platform.utilities.assert.MIMX8QX6"/>
          <component_dependency value="utility.debug_console.MIMX8QX6"/>
          <component_dependency value="component.lpuart_adapter.MIMX8QX6"/>
          <component_dependency value="component.serial_manager.MIMX8QX6"/>
          <component_dependency value="component.lists.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="peripherals.c"/>
        <files mask="pin_mux.c"/>
      </source>
      <source path="devices/MIMX8QX6/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="peripherals.h"/>
        <files mask="pin_mux.h"/>
      </source>
    </component>
    <component id="RTE_Device.MIMX8QX6" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="MIMX8QX6xxxFZ" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <dependencies>
        <component_dependency value="platform.drivers.dma3.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="tools.MIMX8QX6" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="MIMX8QX6xxxFZ" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="cmake_toolchain_files" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="xcc.cmake"/>
      </source>
    </component>
    <component id="component.button.MIMX8QX6" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.timer_manager.MIMX8QX6"/>
          <component_dependency value="component.igpio_adapter.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/button" target_path="component/button" type="src">
        <files mask="button.c"/>
      </source>
      <source path="components/button" target_path="component/button" type="c_include">
        <files mask="button.h"/>
      </source>
    </component>
    <component id="component.codec_cs42888_adapter.MIMX8QX6" name="codecs_cs42888_adapter" brief="Component cs42888 adapter for multi codecs" version="2.2.1" full_name="Component codec_cs42888_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.MIMX8QX6"/>
          <component_dependency value="driver.codec.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/codec/port" target_path="codec" type="src">
        <files mask="fsl_cs42888_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port" target_path="codec" type="c_include">
        <files mask="fsl_cs42888_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="component.codec_i2c.MIMX8QX6" name="codec_i2c" brief="Component codec_i2c" version="2.1.0" full_name="Component codec_i2c" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.lpi2c_adapter.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/codec/i2c" target_path="codec" type="src">
        <files mask="fsl_codec_i2c.c"/>
      </source>
      <source path="components/codec/i2c" target_path="codec" type="c_include">
        <files mask="fsl_codec_i2c.h"/>
      </source>
    </component>
    <component id="component.codec_wm8960_adapter.MIMX8QX6" name="codecs_wm8960_adapter" brief="Component wm8960 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8960_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.MIMX8QX6"/>
          <component_dependency value="driver.codec.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/codec/port" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
        <files mask="fsl_wm8960_adapter.c"/>
      </source>
      <source path="components/codec/port" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
        <files mask="fsl_wm8960_adapter.h"/>
      </source>
    </component>
    <component id="component.common_task.MIMX8QX6" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.osa.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/common_task" target_path="component/common_task" type="src">
        <files mask="common_task.c"/>
      </source>
      <source path="components/common_task" target_path="component/common_task" type="c_include">
        <files mask="common_task.h"/>
      </source>
    </component>
    <component id="component.cs42888_adapter.MIMX8QX6" name="codec_cs42888_adapter" brief="Component cs42888 adapter for single codec" version="2.2.1" full_name="Component cs42888_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.MIMX8QX6"/>
          <component_dependency value="driver.codec.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/codec/port/cs42888" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port/cs42888" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="component.ftm_adapter.MIMX8QX6" name="ftm_adapter" brief="Component ftm_adapter" version="1.0.0" full_name="Component ftm_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.ftm.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="ftm_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.gpt_adapter.MIMX8QX6" name="gpt_adapter" brief="Component gpt_adapter" version="1.0.0" full_name="Component gpt_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.gpt.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="gpt_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.igpio_adapter.MIMX8QX6" name="igpio_adapter" brief="Component igpio_adapter" version="1.0.0" full_name="Component igpio_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="platform.drivers.igpio.MIMX8QX6"/>
      </dependencies>
      <source path="components/gpio" target_path="component/gpio" type="c_include">
        <files mask="gpio.h"/>
      </source>
      <source path="components/gpio" target_path="component/gpio" type="src">
        <files mask="igpio_adapter.c"/>
      </source>
    </component>
    <component id="component.led.MIMX8QX6" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.timer_manager.MIMX8QX6"/>
          <component_dependency value="component.igpio_adapter.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/led" target_path="component/led" type="src">
        <files mask="led.c"/>
      </source>
      <source path="components/led" target_path="component/led" type="c_include">
        <files mask="led.h"/>
      </source>
    </component>
    <component id="component.lists.MIMX8QX6" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
    </component>
    <component id="component.lpi2c_adapter.MIMX8QX6" name="lpi2c_adapter" brief="Component lpi2c_adapter" version="1.0.0" full_name="Component lpi2c_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.lpi2c.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/i2c" target_path="component/i2c" type="c_include">
        <files mask="i2c.h"/>
      </source>
      <source path="components/i2c" target_path="component/i2c" type="src">
        <files mask="lpi2c_adapter.c"/>
      </source>
    </component>
    <component id="component.lpit_adapter.MIMX8QX6" name="lpit_adapter" brief="Component lpit_adapter" version="1.0.0" full_name="Component lpit_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.lpit.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="lpit_adapter.c"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
    </component>
    <component id="component.lpuart_adapter.MIMX8QX6" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.lpuart.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="lpuart_adapter.c"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
    </component>
    <component id="component.mem_manager.MIMX8QX6" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.lists.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/mem_manager" target_path="component/mem_manager" type="src">
        <files mask="mem_manager.c"/>
      </source>
      <source path="components/mem_manager" target_path="component/mem_manager" type="c_include">
        <files mask="mem_manager.h"/>
      </source>
    </component>
    <component id="component.osa.MIMX8QX6" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.lists.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MIMX8QX6" path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.baremetal.MIMX8QX6" path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.freertos-kernel.MIMX8QX6" path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source condition="middleware.freertos-kernel.MIMX8QX6" path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
    </component>
    <component id="component.osa_bm.MIMX8QX6" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="false" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.lists.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
    </component>
    <component id="component.osa_free_rtos.MIMX8QX6" name="osa_free_rtos" brief="Component osa_free_rtos" version="1.0.0" full_name="Component osa_free_rtos" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="false" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.lists.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/osa" target_path="component/osa" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source path="components/osa" target_path="component/osa" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
    </component>
    <component id="component.panic.MIMX8QX6" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="utility.debug_console.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/panic" target_path="component/panic" type="src">
        <files mask="panic.c"/>
      </source>
      <source path="components/panic" target_path="component/panic" type="c_include">
        <files mask="panic.h"/>
      </source>
    </component>
    <component id="component.pwm_ftm_adapter.MIMX8QX6" name="pwm_ftm_adapter" brief="Component pwm_ftm_adapter" version="1.0.0" full_name="Component pwm_ftm_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.ftm.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/pwm" target_path="component/pwm" type="c_include">
        <files mask="pwm.h"/>
      </source>
      <source path="components/pwm" target_path="component/pwm" type="src">
        <files mask="pwm_ftm_adapter.c"/>
      </source>
    </component>
    <component id="component.pwm_tpm_adapter.MIMX8QX6" name="pwm_tpm_adapter" brief="Component pwm_tpm_adapter" version="1.0.0" full_name="Component pwm_tpm_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.tpm.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/pwm" target_path="component/pwm" type="c_include">
        <files mask="pwm.h"/>
      </source>
      <source path="components/pwm" target_path="component/pwm" type="src">
        <files mask="pwm_tpm_adapter.c"/>
      </source>
    </component>
    <component id="component.serial_manager.MIMX8QX6" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.lists.MIMX8QX6"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MIMX8QX6"/>
            <component_dependency value="component.serial_manager_swo.MIMX8QX6"/>
            <component_dependency value="component.serial_manager_usb_cdc_virtual.MIMX8QX6"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
        <files mask="serial_port_internal.h"/>
      </source>
    </component>
    <component id="component.serial_manager_swo.MIMX8QX6" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.serial_manager.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_swo.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_swo.h"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MIMX8QX6" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MIMX8QX6"/>
          <component_dependency value="platform.drivers.lpuart.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_virtual.MIMX8QX6" name="serial_manager_usb_cdc_virtual" brief="Component serial_manager_usb_cdc_virtual" version="1.0.0" full_name="Serial Manager USB CDC Virtual" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="utilities">
      <defines>
        <define name="SERIAL_PORT_TYPE_USBCDC_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_usb_virtual.c"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_usb_virtual.h"/>
      </source>
    </component>
    <component id="component.software_crc_adapter.MIMX8QX6" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="components/crc" target_path="component/crc" type="c_include">
        <files mask="crc.h"/>
      </source>
      <source path="components/crc" target_path="component/crc" type="src">
        <files mask="software_crc_adapter.c"/>
      </source>
    </component>
    <component id="component.timer_manager.MIMX8QX6" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.lists.MIMX8QX6"/>
          <any_of>
            <component_dependency value="component.tpm_adapter.MIMX8QX6"/>
            <component_dependency value="component.lpit_adapter.MIMX8QX6"/>
            <component_dependency value="component.gpt_adapter.MIMX8QX6"/>
            <component_dependency value="component.ftm_adapter.MIMX8QX6"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/timer_manager" target_path="component/timer_manager" type="src">
        <files mask="timer_manager.c"/>
      </source>
      <source path="components/timer_manager" target_path="component/timer_manager" type="c_include">
        <files mask="timer_manager.h"/>
      </source>
    </component>
    <component id="component.tpm_adapter.MIMX8QX6" name="tpm_adapter" brief="Component tpm_adapter" version="1.0.0" full_name="Component tpm_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.tpm.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/timer" target_path="component/timer" type="c_include">
        <files mask="timer.h"/>
      </source>
      <source path="components/timer" target_path="component/timer" type="src">
        <files mask="tpm_adapter.c"/>
      </source>
    </component>
    <component id="component.wm8960_adapter.MIMX8QX6" name="codec_wm8960_adapter" brief="Component wm8960 adapter for single codecs" version="2.2.0" full_name="Component wm8960_adapter" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.MIMX8QX6"/>
          <component_dependency value="driver.codec.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/codec/port/wm8960" target_path="codec" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source path="components/codec/port/wm8960" target_path="codec" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
    </component>
    <component id="device.MIMX8QX6_CMSIS.MIMX8QX6" name="MIMX8QX6_CMSIS" brief="Device MIMX8QX6_cmsis" version="1.0.0" full_name="Device MIMX8QX6_cmsis" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="CMSIS_Include">
      <dependencies>
        <component_dependency value="platform.Include_core_cm4.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6" target_path="device" type="c_include">
        <files mask="MIMX8QX6_cm4.h"/>
        <files mask="MIMX8QX6_cm4_features.h"/>
        <files mask="fsl_device_registers.h"/>
      </source>
    </component>
    <component id="device.MIMX8QX6_debugger.MIMX8QX6" name="MIMX8QX6_debugger" brief="Device MIMX8QX6_debugger" version="1.0.0" full_name="Device MIMX8QX6_debugger" devices="MIMX8QX6xxxFZ" user_visible="true" type="debugger">
      <source path="devices/MIMX8QX6" target_path="MIMX8QX6" type="xml">
        <files mask="MIMX8QX6_cm4.xml"/>
      </source>
    </component>
    <component id="platform.devices.MIMX8QX6_linker.MIMX8QX6" name="MIMX8QX6_linker" brief="Device MIMX8QX6_linker" version="1.0.0" full_name="Device MIMX8QX6_linker" devices="MIMX8QX6xxxFZ" user_visible="true" type="linker">
      <source toolchain="armgcc" path="devices/MIMX8QX6/gcc" target_path="MIMX8QX6/gcc" type="linker">
        <files mask="MIMX8QX6xxxxx_cm4_ddr_ram.ld"/>
        <files mask="MIMX8QX6xxxxx_cm4_ram.ld"/>
      </source>
    </component>
    <component id="device.MIMX8QX6_startup.MIMX8QX6" name="MIMX8QX6_startup" brief="Device MIMX8QX6_startup" version="1.0.0" full_name="Device MIMX8QX6_startup" devices="MIMX8QX6xxxFZ" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="armgcc" path="devices/MIMX8QX6/gcc" target_path="startup" type="asm_include">
        <files mask="startup_MIMX8QX6_cm4.S"/>
      </source>
      <source path="devices/MIMX8QX6" target_path="device" type="src">
        <files mask="system_MIMX8QX6_cm4.c"/>
      </source>
      <source path="devices/MIMX8QX6" target_path="device" type="c_include">
        <files mask="system_MIMX8QX6_cm4.h"/>
      </source>
    </component>
    <component id="docs.MIMX8QX6.MIMX8QX6" name="MIMX8QX6" brief="Docs mimx8qx6" version="1.0.0" full_name="Docs mimx8qx6" devices="MIMX8QX6xxxFZ" user_visible="true" type="documentation">
      <source path="docs" target_path="docs" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for MEK-MIMX8QX.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for MEK-MIMX8QX.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.asmc.MIMX8QX6" name="asmc" brief="ASMC Driver" version="2.0.1" full_name="ASMC Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_asmc.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_asmc.h"/>
      </source>
    </component>
    <component id="platform.drivers.cache_lmem.MIMX8QX6" name="cache lmem" brief="CACHE LMEM Driver" version="2.0.3" full_name="CACHE LMEM Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
    </component>
    <component id="driver.camera-common.MIMX8QX6" name="camera-common" brief="Driver camera-common" version="1.0.0" full_name="Driver camera-common" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="driver.video-common.MIMX8QX6"/>
      </dependencies>
      <source path="components/video/camera" target_path="video" type="c_include">
        <files mask="fsl_camera.h"/>
      </source>
    </component>
    <component id="driver.camera-device-common.MIMX8QX6" name="camera-device-common" brief="Driver camera-device-common" version="1.0.0" full_name="Driver camera-device-common" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.camera-common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/video/camera/device" target_path="video" type="c_include">
        <files mask="fsl_camera_device.h"/>
      </source>
    </component>
    <component id="driver.camera-device-max9286.MIMX8QX6" name="camera-device-max9286" brief="Driver camera-device-max9286" version="1.0.0" full_name="Driver camera-device-max9286" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="board_component">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MIMX8QX6"/>
          <component_dependency value="driver.camera-common.MIMX8QX6"/>
          <component_dependency value="driver.camera-device-common.MIMX8QX6"/>
          <component_dependency value="driver.video-i2c.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/video/camera/device/max9286" target_path="video" type="src">
        <files mask="fsl_max9286.c"/>
      </source>
      <source path="components/video/camera/device/max9286" target_path="video" type="c_include">
        <files mask="fsl_max9286.h"/>
      </source>
    </component>
    <component id="driver.camera-device-ov5640.MIMX8QX6" name="camera-device-ov5640" brief="Driver camera-device-ov5640" version="1.0.0" full_name="Driver camera-device-ov5640" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="board_component">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MIMX8QX6"/>
          <component_dependency value="driver.camera-common.MIMX8QX6"/>
          <component_dependency value="driver.camera-device-common.MIMX8QX6"/>
          <component_dependency value="driver.camera-device-sccb.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/video/camera/device/ov5640" target_path="video" type="src">
        <files mask="fsl_ov5640.c"/>
      </source>
      <source path="components/video/camera/device/ov5640" target_path="video" type="c_include">
        <files mask="fsl_ov5640.h"/>
      </source>
    </component>
    <component id="driver.camera-device-sccb.MIMX8QX6" name="camera-device-sccb" brief="Driver camera-device-sccb" version="1.0.0" full_name="Driver camera-device-sccb" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="components/video/camera/device/sccb" target_path="video" type="src">
        <files mask="fsl_sccb.c"/>
      </source>
      <source path="components/video/camera/device/sccb" target_path="video" type="c_include">
        <files mask="fsl_sccb.h"/>
      </source>
    </component>
    <component id="driver.camera-receiver-common.MIMX8QX6" name="camera-receiver-common" brief="Driver camera-receiver-common" version="1.0.0" full_name="Driver camera-receiver-common" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MIMX8QX6"/>
          <component_dependency value="driver.camera-common.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/video/camera/receiver" target_path="video" type="c_include">
        <files mask="fsl_camera_receiver.h"/>
      </source>
    </component>
    <component id="driver.camera-receiver-isi.MIMX8QX6" name="camera-receiver-isi" brief="Driver camera-receiver-isi" version="1.0.0" full_name="Driver camera-receiver-isi" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.isi.MIMX8QX6"/>
          <component_dependency value="driver.camera-receiver-common.MIMX8QX6"/>
          <component_dependency value="driver.camera-common.MIMX8QX6"/>
          <component_dependency value="driver.video-common.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/video/camera/receiver/isi" target_path="video" type="src">
        <files mask="fsl_isi_camera_adapter.c"/>
      </source>
      <source path="components/video/camera/receiver/isi" target_path="video" type="c_include">
        <files mask="fsl_isi_camera_adapter.h"/>
      </source>
    </component>
    <component id="platform.drivers.ci_pi.MIMX8QX6" name="ci_pi" brief="CI_PI Driver" version="2.0.2" full_name="CI_PI Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_ci_pi.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ci_pi.h"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MIMX8QX6" name="clock" brief="Driver clock" version="1.0.0" full_name="Driver clock" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.scfwapi.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_cmsis.MIMX8QX6" name="lpi2c_cmsis" brief="LPI2C CMSIS Driver" version="2.0.0" full_name="LPI2C CMSIS Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpi2c.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="RTE_Device.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c_cmsis.c"/>
      </source>
      <source path="devices/MIMX8QX6/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_cmsis.MIMX8QX6" name="lpspi_cmsis" brief="LPSPI CMSIS Driver" version="2.0.0" full_name="LPSPI CMSIS Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpspi.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="RTE_Device.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi_cmsis.c"/>
      </source>
      <source path="devices/MIMX8QX6/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi_cmsis.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_cmsis_edma.MIMX8QX6" name="lpuart_cmsis" brief="LPUART CMSIS Driver" version="2.0.1" full_name="LPUART CMSIS EDMA Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="CMSIS_driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart_edma.MIMX8QX6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMX8QX6"/>
          <component_dependency value="RTE_Device.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_cmsis.c"/>
      </source>
      <source path="devices/MIMX8QX6/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_cmsis.h"/>
      </source>
    </component>
    <component id="driver.codec.MIMX8QX6" name="codec" brief="Driver codec" version="2.2.0" full_name="Driver codec" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <any_of>
            <component_dependency value="component.wm8960_adapter.MIMX8QX6"/>
            <component_dependency value="component.codec_cs42888_adapter.MIMX8QX6"/>
            <component_dependency value="component.codec_wm8960_adapter.MIMX8QX6"/>
            <component_dependency value="component.cs42888_adapter.MIMX8QX6"/>
          </any_of>
        </all>
      </dependencies>
      <source path="components/codec" target_path="codec" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
      <source path="components/codec" target_path="codec" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MIMX8QX6" name="common" brief="COMMON Driver" version="2.2.4" full_name="COMMON Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MIMX8QX6"/>
          <component_dependency value="device.MIMX8QX6_CMSIS.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
    </component>
    <component id="driver.cs42888.MIMX8QX6" name="cs42888" brief="Driver cs42888" version="2.1.1" full_name="Driver cs42888" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.codec_i2c.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/codec/cs42888" target_path="codec" type="src">
        <files mask="fsl_cs42888.c"/>
      </source>
      <source path="components/codec/cs42888" target_path="codec" type="c_include">
        <files mask="fsl_cs42888.h"/>
      </source>
    </component>
    <component id="driver.display-adv7535.MIMX8QX6" name="display-adv7535" brief="Driver display-adv7535" version="1.0.0" full_name="Driver display-adv7535" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="board_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="driver.video-i2c.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/video/display/adv7535" target_path="video" type="src">
        <files mask="fsl_adv7535.c"/>
      </source>
      <source path="components/video/display/adv7535" target_path="video" type="c_include">
        <files mask="fsl_adv7535.h"/>
      </source>
    </component>
    <component id="driver.display-common.MIMX8QX6" name="display-common" brief="Driver display-common" version="1.0.0" full_name="Driver display-common" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="driver.video-common.MIMX8QX6"/>
      </dependencies>
      <source path="components/video/display" target_path="video" type="c_include">
        <files mask="fsl_display.h"/>
      </source>
    </component>
    <component id="driver.display-it6263.MIMX8QX6" name="display-it6263" brief="Driver display-it6263" version="1.0.0" full_name="Driver display-it6263" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="board_component">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MIMX8QX6"/>
          <component_dependency value="driver.video-i2c.MIMX8QX6"/>
          <component_dependency value="driver.display-common.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/video/display/it6263" target_path="video" type="src">
        <files mask="fsl_it6263.c"/>
      </source>
      <source path="components/video/display/it6263" target_path="video" type="c_include">
        <files mask="fsl_it6263.h"/>
      </source>
    </component>
    <component id="driver.display-mipi-dsi-cmd.MIMX8QX6" name="display-mipi-dsi-cmd" brief="Driver display-mipi-dsi-cmd" version="1.0.1" full_name="Driver display-mipi-dsi-cmd" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.mipi_dsi.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/video/display/mipi_dsi_cmd" target_path="video" type="src">
        <files mask="fsl_mipi_dsi_cmd.c"/>
      </source>
      <source path="components/video/display/mipi_dsi_cmd" target_path="video" type="c_include">
        <files mask="fsl_mipi_dsi_cmd.h"/>
      </source>
    </component>
    <component id="driver.display-rm67191.MIMX8QX6" name="display-rm67191" brief="Driver display-rm67191" version="1.0.0" full_name="Driver display-rm67191" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="board_component">
      <dependencies>
        <all>
          <component_dependency value="driver.display-common.MIMX8QX6"/>
          <component_dependency value="driver.display-mipi-dsi-cmd.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/video/display/rm67191" target_path="video" type="src">
        <files mask="fsl_rm67191.c"/>
      </source>
      <source path="components/video/display/rm67191" target_path="video" type="c_include">
        <files mask="fsl_rm67191.h"/>
      </source>
    </component>
    <component id="platform.drivers.dma3.MIMX8QX6" name="dma" brief="EDMA Driver" version="2.2.2" full_name="EDMA Driver" devices="MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.dpr.MIMX8QX6" name="dpr" brief="DPR Driver" version="2.0.1" full_name="DPR Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_dpr.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dpr.h"/>
      </source>
    </component>
    <component id="platform.drivers.dpu.MIMX8QX6" name="dpu" brief="DPU Driver" version="2.1.1" full_name="DPU Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_dpu.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dpu.h"/>
      </source>
    </component>
    <component id="platform.drivers.dpu_irqsteer.MIMX8QX6" name="dpu_irqsteer" brief="DPU IRQSTEER Driver" version="2.0.0" full_name="DPU IRQSTEER Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dpu_irqsteer.h"/>
      </source>
    </component>
    <component id="platform.drivers.enet.MIMX8QX6" name="enet" brief="ENET Driver" version="2.3.0" full_name="ENET Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_enet.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_enet.h"/>
      </source>
    </component>
    <component id="platform.drivers.esai.MIMX8QX6" name="esai" brief="ESAI Driver" version="2.1.0" full_name="ESAI Driver" devices="MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_esai.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_esai.h"/>
      </source>
    </component>
    <component id="platform.drivers.esai_edma.MIMX8QX6" name="esai_edma" brief="ESAI Driver" version="2.1.0" full_name="ESAI EDMA Driver" devices="MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.esai.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_esai_edma.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_esai_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcan.MIMX8QX6" name="flexcan" brief="FLEXCAN Driver" version="2.5.2" full_name="FLEXCAN Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexcan.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexcan.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcan_edma.MIMX8QX6" name="flexcan_edma" brief="FLEXCAN Driver" version="2.5.2" full_name="FLEXCAN EDMA Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma3.MIMX8QX6"/>
          <component_dependency value="platform.drivers.flexcan.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexcan_edma.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexcan_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexspi.MIMX8QX6" name="flexspi" brief="FLEXSPI Driver" version="2.2.2" full_name="FLEXSPI Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexspi.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.ftm.MIMX8QX6" name="ftm" brief="FTM Driver" version="2.2.3" full_name="FTM Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
    </component>
    <component id="platform.drivers.gpt.MIMX8QX6" name="gpt" brief="GPT Driver" version="2.0.2" full_name="GPT Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpt.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpt.h"/>
      </source>
    </component>
    <component id="platform.drivers.igpio.MIMX8QX6" name="gpio" brief="GPIO Driver" version="2.0.3" full_name="igpio" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.intmux.MIMX8QX6" name="intmux" brief="INTMUX Driver" version="2.0.3" full_name="INTMUX Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_intmux.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_intmux.h"/>
      </source>
    </component>
    <component id="platform.drivers.irqsteer.MIMX8QX6" name="irqsteer" brief="IRQSTEER Driver" version="2.0.2" full_name="IRQSTEER Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_irqsteer.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_irqsteer.h"/>
      </source>
    </component>
    <component id="platform.drivers.isi.MIMX8QX6" name="isi" brief="ISI Driver" version="2.0.2" full_name="ISI Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_isi.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_isi.h"/>
      </source>
    </component>
    <component id="platform.drivers.ldb_combo_phy.MIMX8QX6" name="ldb" brief="LDB Driver" version="2.0.1" full_name="LDB Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_ldb.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ldb.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpadc.MIMX8QX6" name="lpadc" brief="LPADC Driver" version="2.2.0" full_name="LPADC Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpadc.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpadc.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c.MIMX8QX6" name="i2c" brief="LPI2C Driver" version="2.1.11" full_name="LPI2C Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_edma.MIMX8QX6" name="i2c_edma" brief="LPI2C Driver" version="2.1.11" full_name="LPI2C Edma Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma3.MIMX8QX6"/>
          <component_dependency value="platform.drivers.lpi2c.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpi2c_freertos.MIMX8QX6" name="i2c_freertos" brief="LPI2C Driver" version="2.1.11" full_name="LPI2C Freerto Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpi2c.MIMX8QX6"/>
          <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpi2c_freertos.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpi2c_freertos.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpit.MIMX8QX6" name="lpit" brief="LPIT Driver" version="2.0.1" full_name="LPIT Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpit.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpit.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi.MIMX8QX6" name="lpspi" brief="LPSPI Driver" version="2.0.5" full_name="LPSPI Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_edma.MIMX8QX6" name="lpspi_edma" brief="LPSPI Driver" version="2.0.5" full_name="LPSPI Edma Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma3.MIMX8QX6"/>
          <component_dependency value="platform.drivers.lpspi.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpspi_freertos.MIMX8QX6" name="lpspi_freertos" brief="LPSPI Driver" version="2.0.5" full_name="LPSPI Freertos Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpspi.MIMX8QX6"/>
          <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpspi_freertos.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpspi_freertos.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart.MIMX8QX6" name="lpuart" brief="LPUART Driver" version="2.3.0" full_name="LPUART Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_edma.MIMX8QX6" name="lpuart_edma" brief="LPUART Driver" version="2.3.0" full_name="LPUART Edma Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma3.MIMX8QX6"/>
          <component_dependency value="platform.drivers.lpuart.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpuart_freertos.MIMX8QX6" name="lpuart_freertos" brief="LPUART Driver" version="2.3.0" full_name="LPUART Freertos Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MIMX8QX6"/>
          <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers/freertos" type="src">
        <files mask="fsl_lpuart_freertos.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers/freertos" type="c_include">
        <files mask="fsl_lpuart_freertos.h"/>
      </source>
    </component>
    <component id="driver.mdio-common.MIMX8QX6" name="mdio-common" brief="Driver mdio-common" version="2.0.0" full_name="Driver mdio-common" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="board_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="components/phy" target_path="mdio" type="c_include">
        <files mask="fsl_mdio.h"/>
      </source>
    </component>
    <component id="driver.mdio-enet.MIMX8QX6" name="mdio-enet" brief="Driver mdio-enet" version="2.0.0" full_name="Driver mdio-enet" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="board_component">
      <dependencies>
        <all>
          <component_dependency value="driver.mdio-common.MIMX8QX6"/>
          <component_dependency value="platform.drivers.enet.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/phy/mdio/enet" target_path="mdio" type="src">
        <files mask="fsl_enet_mdio.c"/>
      </source>
      <source path="components/phy/mdio/enet" target_path="mdio" type="c_include">
        <files mask="fsl_enet_mdio.h"/>
      </source>
    </component>
    <component id="platform.drivers.memory.MIMX8QX6" name="memory" brief="MEMORY Driver" version="2.0.0" full_name="Memory Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_memory.h"/>
      </source>
    </component>
    <component id="platform.drivers.mipi_csi2rx.MIMX8QX6" name="mipi_csi2rx" brief="MIPI CSI2RX Driver" version="2.0.3" full_name="MIPI CSI2RX Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_mipi_csi2rx.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_mipi_csi2rx.h"/>
      </source>
    </component>
    <component id="platform.drivers.mipi_dsi.MIMX8QX6" name="mipi_dsi" brief="MIPI DSI Driver" version="2.0.4" full_name="MIPI DSI Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_mipi_dsi.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_mipi_dsi.h"/>
      </source>
    </component>
    <component id="platform.drivers.mu.MIMX8QX6" name="mu" brief="MU Driver" version="2.0.5" full_name="MU Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_mu.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_mu.h"/>
      </source>
    </component>
    <component id="driver.phy-common.MIMX8QX6" name="phy-common" brief="Driver phy-common" version="2.0.0" full_name="Driver phy-common" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="driver.mdio-common.MIMX8QX6"/>
      </dependencies>
      <source path="components/phy" target_path="phy" type="c_include">
        <files mask="fsl_phy.h"/>
      </source>
    </component>
    <component id="driver.phy-device-ar8031.MIMX8QX6" name="phy-device-ar8031" brief="Driver phy-device-ar8031" version="2.0.1" full_name="Driver phy-device-ar8031" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="board_component">
      <dependencies>
        <component_dependency value="driver.phy-common.MIMX8QX6"/>
      </dependencies>
      <source path="components/phy/device/phyar8031" target_path="phy" type="src">
        <files mask="fsl_phyar8031.c"/>
      </source>
      <source path="components/phy/device/phyar8031" target_path="phy" type="c_include">
        <files mask="fsl_phyar8031.h"/>
      </source>
    </component>
    <component id="platform.drivers.prg.MIMX8QX6" name="prg" brief="PRG Driver" version="2.0.1" full_name="PRG Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_prg.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_prg.h"/>
      </source>
    </component>
    <component id="platform.drivers.rgpio.MIMX8QX6" name="gpio" brief="RGPIO Driver" version="2.0.2" full_name="RGPIO Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_rgpio.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rgpio.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai.MIMX8QX6" name="sai" brief="SAI Driver" version="2.3.1" full_name="SAI Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
    </component>
    <component id="platform.drivers.sai_edma.MIMX8QX6" name="sai_edma" brief="SAI EDMA Driver" version="2.2.0" full_name="SAI EDMA Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma3.MIMX8QX6"/>
          <component_dependency value="platform.drivers.sai.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_sai_edma.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sai_edma.h"/>
      </source>
    </component>
    <component id="platform.drivers.scfwapi.MIMX8QX6" name="scfw_api" brief="SCFW API Driver" version="1.0.0" full_name="SCFW API Driver" devices="MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <source path="devices/MIMX8QX6/scfw_api/main" target_path="scfw_api/main" type="c_include">
        <files mask="imx8qx_pads.h"/>
        <files mask="ipc.h"/>
        <files mask="rpc.h"/>
        <files mask="scfw.h"/>
        <files mask="types.h"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/main" target_path="scfw_api/main" type="src">
        <files mask="ipc_imx8qx.c"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/irq" target_path="scfw_api/svc/irq" type="c_include">
        <files mask="irq_api.h"/>
        <files mask="irq_rpc.h"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/irq" target_path="scfw_api/svc/irq" type="src">
        <files mask="irq_rpc_clnt.c"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/misc" target_path="scfw_api/svc/misc" type="c_include">
        <files mask="misc_api.h"/>
        <files mask="misc_rpc.h"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/misc" target_path="scfw_api/svc/misc" type="src">
        <files mask="misc_rpc_clnt.c"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/pad" target_path="scfw_api/svc/pad" type="c_include">
        <files mask="pad_api.h"/>
        <files mask="pad_rpc.h"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/pad" target_path="scfw_api/svc/pad" type="src">
        <files mask="pad_rpc_clnt.c"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/pm" target_path="scfw_api/svc/pm" type="c_include">
        <files mask="pm_api.h"/>
        <files mask="pm_rpc.h"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/pm" target_path="scfw_api/svc/pm" type="src">
        <files mask="pm_rpc_clnt.c"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/rm" target_path="scfw_api/svc/rm" type="c_include">
        <files mask="rm_api.h"/>
        <files mask="rm_rpc.h"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/rm" target_path="scfw_api/svc/rm" type="src">
        <files mask="rm_rpc_clnt.c"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/seco" target_path="scfw_api/svc/seco" type="c_include">
        <files mask="seco_api.h"/>
        <files mask="seco_rpc.h"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/seco" target_path="scfw_api/svc/seco" type="src">
        <files mask="seco_rpc_clnt.c"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/timer" target_path="scfw_api/svc/timer" type="c_include">
        <files mask="timer_api.h"/>
        <files mask="timer_rpc.h"/>
      </source>
      <source path="devices/MIMX8QX6/scfw_api/svc/timer" target_path="scfw_api/svc/timer" type="src">
        <files mask="timer_rpc_clnt.c"/>
      </source>
    </component>
    <component id="platform.drivers.sema42.MIMX8QX6" name="sema42" brief="SEMA42 Driver" version="2.0.2" full_name="SEMA42 Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_sema42.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sema42.h"/>
      </source>
    </component>
    <component id="driver.srtm.MIMX8QX6" name="srtm" brief="Driver srtm" version="1.0.0" full_name="Driver srtm" devices="MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <source path="components/srtm/include" target_path="srtm/include" type="c_include">
        <files mask="srtm_channel.h"/>
        <files mask="srtm_defs.h"/>
        <files mask="srtm_dispatcher.h"/>
        <files mask="srtm_message.h"/>
        <files mask="srtm_peercore.h"/>
        <files mask="srtm_service.h"/>
      </source>
      <source path="components/srtm/port" target_path="srtm/port" type="src">
        <files mask="srtm_message_pool.c"/>
      </source>
      <source path="components/srtm/srtm" target_path="srtm/srtm" type="src">
        <files mask="srtm_channel.c"/>
        <files mask="srtm_dispatcher.c"/>
        <files mask="srtm_message.c"/>
        <files mask="srtm_peercore.c"/>
        <files mask="srtm_service.c"/>
      </source>
      <source path="components/srtm/srtm" target_path="srtm/srtm" type="c_include">
        <files mask="srtm_channel_struct.h"/>
        <files mask="srtm_dispatcher_struct.h"/>
        <files mask="srtm_heap.h"/>
        <files mask="srtm_list.h"/>
        <files mask="srtm_message_pool.h"/>
        <files mask="srtm_message_struct.h"/>
        <files mask="srtm_mutex.h"/>
        <files mask="srtm_peercore_struct.h"/>
        <files mask="srtm_sem.h"/>
        <files mask="srtm_service_struct.h"/>
      </source>
    </component>
    <component id="driver.srtm.freertos.MIMX8QX6" name="freertos" brief="Driver srtm freertos" version="1.0.0" full_name="Driver srtm freertos" devices="MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="driver.srtm.MIMX8QX6"/>
      </dependencies>
      <source path="components/srtm/port" target_path="srtm/port" type="src">
        <files mask="srtm_heap_freertos.c"/>
        <files mask="srtm_mutex_freertos.c"/>
        <files mask="srtm_sem_freertos.c"/>
      </source>
    </component>
    <component id="platform.drivers.tpm.MIMX8QX6" name="tpm" brief="TPM Driver" version="2.0.7" full_name="TPM Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
    </component>
    <component id="platform.drivers.tstmr.MIMX8QX6" name="tstmr" brief="TSTMR Driver" version="2.0.0" full_name="TSTMR Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_tstmr.h"/>
      </source>
    </component>
    <component id="driver.video-common.MIMX8QX6" name="video-common" brief="Driver video-common" version="1.0.0" full_name="Driver video-common" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="components/video" target_path="video" type="src">
        <files mask="fsl_video_common.c"/>
      </source>
      <source path="components/video" target_path="video" type="c_include">
        <files mask="fsl_video_common.h"/>
      </source>
    </component>
    <component id="driver.video-i2c.MIMX8QX6" name="video-i2c" brief="Driver video-i2c" version="1.0.0" full_name="Driver video-i2c" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="abstraction_layer">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="components/video/i2c" target_path="video" type="src">
        <files mask="fsl_video_i2c.c"/>
      </source>
      <source path="components/video/i2c" target_path="video" type="c_include">
        <files mask="fsl_video_i2c.h"/>
      </source>
    </component>
    <component id="platform.drivers.wdog32.MIMX8QX6" name="wdog" brief="WDOG32 Driver" version="2.0.3" full_name="WDOG32 Driver" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="driver">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="src">
        <files mask="fsl_wdog32.c"/>
      </source>
      <source path="devices/MIMX8QX6/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_wdog32.h"/>
      </source>
    </component>
    <component id="driver.wm8960.MIMX8QX6" name="wm8960" brief="Driver wm8960" version="2.1.1" full_name="Driver wm8960" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="software_component">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
          <component_dependency value="component.codec_i2c.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="components/codec/wm8960" target_path="codec" type="src">
        <files mask="fsl_wm8960.c"/>
      </source>
      <source path="components/codec/wm8960" target_path="codec" type="c_include">
        <files mask="fsl_wm8960.h"/>
      </source>
    </component>
    <component id="middleware.baremetal.MIMX8QX6" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="MIMX8QX6xxxFZ" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.freertos-aws_iot.libraries.3rdparty.http_parser_unused.MIMX8QX6" name="AWS IoT 3rd party http_parser unused" brief="AWS IoT 3rd party http_parser unused files" version="202002.00.0" full_name="AWS IoT 3rd party http_parser unused" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <source path="rtos/freertos/libraries/3rdparty/http_parser" target_path="freertos/libraries/3rdparty/http_parser" type="other">
        <files mask=".gitignore"/>
        <files mask=".mailmap"/>
        <files mask=".travis.yml"/>
        <files mask="AUTHORS"/>
        <files mask="LICENSE-MIT"/>
        <files mask="Makefile"/>
        <files mask="README.md"/>
      </source>
      <source path="rtos/freertos/libraries/3rdparty/http_parser" target_path="freertos/libraries/3rdparty/http_parser" type="src">
        <files mask="http_parser.c"/>
      </source>
      <source path="rtos/freertos/libraries/3rdparty/http_parser" target_path="freertos/libraries/3rdparty/http_parser" type="c_include">
        <files mask="http_parser.h"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.MIMX8QX6" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="202002.00.0" full_name="FreeRTOS kernel" devices="MIMX8QX6xxxFZ" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_FREE_RTOS" value=""/>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.extension.MIMX8QX6"/>
          <component_dependency value="middleware.freertos-kernel.template.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="rtos/freertos/freertos_kernel" target_path="freertos/freertos_kernel" type="src">
        <files mask="croutine.c"/>
        <files mask="event_groups.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/include" target_path="freertos/freertos_kernel/include" type="c_include">
        <files mask="FreeRTOS.h"/>
        <files mask="StackMacros.h"/>
        <files mask="atomic.h"/>
        <files mask="croutine.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source toolchain="armgcc" compiler="compiler_gcc" path="rtos/freertos/freertos_kernel/portable/GCC/ARM_CM4F" target_path="freertos/freertos_kernel/portable/GCC/ARM_CM4F" type="src" device_cores="cm4_MIMX8QX6xxxFZ">
        <files mask="port.c"/>
      </source>
      <source toolchain="armgcc" compiler="compiler_gcc" path="rtos/freertos/freertos_kernel/portable/GCC/ARM_CM4F" target_path="freertos/freertos_kernel/portable/GCC/ARM_CM4F" type="c_include" device_cores="cm4_MIMX8QX6xxxFZ">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/MemMang" target_path="freertos/freertos_kernel/portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable" target_path="freertos/freertos_kernel/portable" type="doc">
        <files mask="readme.txt"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.armv8m.MIMX8QX6" name="FreeRTOS port ARMv8M" brief="FreeRTOS port ARMv8M" version="202002.00.0" full_name="FreeRTOS port ARMv8M" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
      </dependencies>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M" target_path="freertos/freertos_kernel/portable/ARMv8M" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M" target_path="freertos/freertos_kernel/portable/ARMv8M" type="script">
        <files mask="copy_files.py"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure" type="src">
        <files mask="port.c"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="src">
        <files mask="portasm.c"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="src">
        <files mask="portasm.c"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/non_secure" target_path="freertos/freertos_kernel/portable/ARMv8M/non_secure" type="c_include">
        <files mask="portasm.h"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure" target_path="freertos/freertos_kernel/portable/ARMv8M/secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" target_path="freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" target_path="freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" target_path="freertos/freertos_kernel/portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure/context" target_path="freertos/freertos_kernel/portable/ARMv8M/secure/context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure/context" target_path="freertos/freertos_kernel/portable/ARMv8M/secure/context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure/heap" target_path="freertos/freertos_kernel/portable/ARMv8M/secure/heap" type="src">
        <files mask="secure_heap.c"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure/heap" target_path="freertos/freertos_kernel/portable/ARMv8M/secure/heap" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure/init" target_path="freertos/freertos_kernel/portable/ARMv8M/secure/init" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure/init" target_path="freertos/freertos_kernel/portable/ARMv8M/secure/init" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMv8M/secure/macros" target_path="freertos/freertos_kernel/portable/ARMv8M/secure/macros" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.doc.MIMX8QX6" name="FreeRTOS doc" brief="FreeRTOS doc" version="202002.00.0" full_name="FreeRTOS doc" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
      </dependencies>
      <source path="rtos/freertos/doc" target_path="freertos/doc" type="doc">
        <files mask="AFQ Developer Guide - Board Qualification Errata.pdf"/>
        <files mask="Amazon FreeRTOS Qualification Developer Guide.pdf"/>
        <files mask="mainpage.txt"/>
      </source>
      <source path="rtos/freertos/doc" target_path="freertos/doc" type="other">
        <files mask="README.md"/>
        <files mask="guidance.md"/>
      </source>
      <source path="rtos/freertos/doc/config" target_path="freertos/doc/config" type="other">
        <files mask="ble"/>
        <files mask="common"/>
        <files mask="https"/>
        <files mask="main"/>
        <files mask="ota"/>
        <files mask="platform"/>
        <files mask="posix"/>
        <files mask="secure_sockets"/>
        <files mask="wifi"/>
      </source>
      <source path="rtos/freertos/doc/config/html" target_path="freertos/doc/config/html" type="doc">
        <files mask="footer.html"/>
        <files mask="header.html"/>
        <files mask="style.css"/>
      </source>
      <source path="rtos/freertos/doc/config" target_path="freertos/doc/config" type="xml">
        <files mask="layout_library.xml"/>
        <files mask="layout_main.xml"/>
      </source>
      <source path="rtos/freertos/doc/extra_files/https" target_path="freertos/doc/extra_files/https" type="doc">
        <files mask="gettysburg.txt"/>
      </source>
      <source path="rtos/freertos/doc/freertos_port_qual" target_path="freertos/doc/freertos_port_qual" type="doc">
        <files mask="FreeRTOS_Porting_Guide.pdf"/>
        <files mask="FreeRTOS_Qualification_Guide.pdf"/>
      </source>
      <source path="rtos/freertos/doc" target_path="freertos/doc" type="script">
        <files mask="generate_doc.sh"/>
      </source>
      <source path="rtos/freertos/doc/guide" target_path="freertos/doc/guide" type="doc">
        <files mask="building.txt"/>
        <files mask="developer.txt"/>
        <files mask="style.txt"/>
      </source>
      <source path="rtos/freertos/doc/lib" target_path="freertos/doc/lib" type="doc">
        <files mask="ble.txt"/>
        <files mask="https.txt"/>
        <files mask="platform.txt"/>
        <files mask="posix.txt"/>
        <files mask="secure_sockets.txt"/>
        <files mask="wifi.txt"/>
      </source>
      <source path="rtos/freertos/doc/plantuml" target_path="freertos/doc/plantuml" type="other">
        <files mask="RecyclableJobStatus.pu"/>
        <files mask="StaticJobStatus.pu"/>
        <files mask="https_client_async_callback_order.pu"/>
        <files mask="taskpool_design_typicaloperation.pu"/>
      </source>
      <source path="rtos/freertos/doc/plantuml" target_path="freertos/doc/plantuml" type="xml">
        <files mask="https_client_async_workflow.xml"/>
        <files mask="https_client_sync_workflow.xml"/>
      </source>
      <source path="rtos/freertos/doc/plantuml/images" target_path="freertos/doc/plantuml/images" type="image">
        <files mask="BLE-architecture.png"/>
        <files mask="RecyclableJobStatus.png"/>
        <files mask="StaticJobStatus.png"/>
        <files mask="blediagram.png"/>
        <files mask="https_client_async_callback_order.png"/>
        <files mask="https_client_async_workflow.png"/>
        <files mask="https_client_sync_workflow.png"/>
        <files mask="mqtt_demo.png"/>
        <files mask="mqtt_design_typicaloperation.png"/>
        <files mask="shadow_demo.png"/>
        <files mask="taskpool_design_typicaloperation.png"/>
      </source>
      <source path="rtos/freertos/doc/user_guide" target_path="freertos/doc/user_guide" type="doc">
        <files mask="global_config.txt"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.extension.MIMX8QX6" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="202002.00.0" full_name="FreeRTOS NXP extension" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other">
      <source path="rtos/freertos/freertos_kernel/include" target_path="freertos/freertos_kernel/include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_1.MIMX8QX6" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="202002.00.0" full_name="FreeRTOS heap 1" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
      </dependencies>
      <source path="rtos/freertos/freertos_kernel/portable/MemMang" target_path="freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.MIMX8QX6" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="202002.00.0" full_name="FreeRTOS heap 2" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
      </dependencies>
      <source path="rtos/freertos/freertos_kernel/portable/MemMang" target_path="freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.MIMX8QX6" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="202002.00.0" full_name="FreeRTOS heap_3" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
      </dependencies>
      <source path="rtos/freertos/freertos_kernel/portable/MemMang" target_path="freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.MIMX8QX6" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="202002.00.0" full_name="FreeRTOS heap 4" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
      </dependencies>
      <source path="rtos/freertos/freertos_kernel/portable/MemMang" target_path="freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.MIMX8QX6" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="202002.00.0" full_name="FreeRTOS heap 5" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
      </dependencies>
      <source path="rtos/freertos/freertos_kernel/portable/MemMang" target_path="freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_newlib.MIMX8QX6" name="FreeRTOS heap newlib" brief="FreeRTOS heap newlib" version="202002.00.0" full_name="FreeRTOS heap newlib" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
      </dependencies>
      <source path="rtos/freertos/freertos_kernel/portable/MemMang" target_path="freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_useNewlib.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.MIMX8QX6" name="FreeRTOS MPU wrappers" brief="FreeRTOS MPU wrappers" version="202002.00.0" full_name="FreeRTOS MPU wrappers" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
      </dependencies>
      <source path="rtos/freertos/freertos_kernel/portable/Common" target_path="freertos/freertos_kernel/portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.root_doc.MIMX8QX6" name="Root FreeRTOS documents." brief="FreeRTOS root documents" version="202002.00.0" full_name="FreeRTOS root documents" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
      </dependencies>
      <source path="rtos/freertos" target_path="freertos" type="other">
        <files mask="CHANGELOG.md"/>
      </source>
      <source path="rtos/freertos" target_path="freertos" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
        <files mask="directories.txt"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.template.MIMX8QX6" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="202002.00.0" full_name="FreeRTOS configuration template" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="project_template">
      <source exclude="true" path="rtos/freertos/freertos_kernel/portable/MemMang" target_path="freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
        <files mask="heap_useNewlib.c"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/MemMang" target_path="freertos/freertos_kernel/portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source path="rtos/freertos/template/ARM_CM4F" target_path="source" type="c_include" device_cores="cm4_MIMX8QX6xxxFZ">
        <files mask="FreeRTOSConfig.h"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.unused.MIMX8QX6" name="FreeRTOS unused" brief="FreeRTOS unused" version="202002.00.0" full_name="FreeRTOS unused" devices="MIMX8QX6xxxFZ" category="Operating System/FreeRTOS kernel" user_visible="false" type="other">
      <source path="rtos/freertos" target_path="freertos" type="other">
        <files mask="LICENSE"/>
        <files mask="README.md"/>
      </source>
      <source path="rtos/freertos" target_path="freertos" type="script">
        <files mask="PreLoad.cmake"/>
      </source>
      <source path="rtos/freertos/freertos_kernel" target_path="freertos/freertos_kernel" type="doc">
        <files mask="History.txt"/>
        <files mask="readme.txt"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/License" target_path="freertos/freertos_kernel/License" type="doc">
        <files mask="license.txt"/>
      </source>
      <source path="rtos/freertos/freertos_kernel" target_path="freertos/freertos_kernel" type="other">
        <files mask="Quick_Start_Guide.url"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/include" target_path="freertos/freertos_kernel/include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source path="rtos/freertos/freertos_kernel/portable/ARMClang" target_path="freertos/freertos_kernel/portable/ARMClang" type="doc">
        <files mask="Use-the-GCC-ports.txt"/>
      </source>
    </component>
    <component id="middleware.multicore.MIMX8QX6" name="multicore middleware" brief="Multicore SDK" version="2.8.0" full_name="Multicore Software Development Kit" devices="MIMX8QX6xxxFZ" user_visible="true" type="other">
      <source path="middleware/multicore" target_path="multicore" type="doc">
        <files mask="ChangeLogKSDK.txt" hidden="true"/>
        <files mask="readme.txt" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.remoteproc.loadscript.MIMX8QX6" name="remoteproc_load_script" brief="remoteproc-load script" version="1.0.0" full_name="remoteproc-load script" devices="MIMX8QX6xxxFZ" user_visible="true" type="other">
      <source path="middleware/multicore/tools/remoteproc-load" target_path="multicore/tools/remoteproc-load" type="other">
        <files mask="Readme.md"/>
        <files mask="remote.cfg"/>
      </source>
      <source path="middleware/multicore/tools/remoteproc-load" target_path="multicore/tools/remoteproc-load" type="script">
        <files mask="load.sh"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.MIMX8QX6" name="rpmsg_lite" brief="RPMsg-Lite" version="3.1.0" full_name="Remote Procedure Messaging Lite library" devices="MIMX8QX6xxxFZ" category="Multicore/RPMsg-Lite" user_visible="false" type="middleware">
      <source path="middleware/multicore/rpmsg_lite/doc" target_path="rpmsg_lite/doc" type="image">
        <files mask="arrowdown.png" hidden="true"/>
        <files mask="arrowright.png" hidden="true"/>
        <files mask="bc_s.png" hidden="true"/>
        <files mask="bdwn.png" hidden="true"/>
        <files mask="closed.png" hidden="true"/>
        <files mask="doc.png" hidden="true"/>
        <files mask="doxygen.png" hidden="true"/>
        <files mask="folderclosed.png" hidden="true"/>
        <files mask="folderopen.png" hidden="true"/>
        <files mask="nav_f.png" hidden="true"/>
        <files mask="nav_g.png" hidden="true"/>
        <files mask="nav_h.png" hidden="true"/>
        <files mask="nxp_logo_small.png" hidden="true"/>
        <files mask="open.png" hidden="true"/>
        <files mask="rpmsg_isoosi.png" hidden="true"/>
        <files mask="rpmsg_lite_arch.png" hidden="true"/>
        <files mask="rpmsg_lite_send_receive.png" hidden="true"/>
        <files mask="splitbar.png" hidden="true"/>
        <files mask="sync_off.png" hidden="true"/>
        <files mask="sync_on.png" hidden="true"/>
        <files mask="tab_a.png" hidden="true"/>
        <files mask="tab_b.png" hidden="true"/>
        <files mask="tab_h.png" hidden="true"/>
        <files mask="tab_s.png" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/doc" target_path="rpmsg_lite/doc" type="doc">
        <files mask="customdoxygen.css" hidden="true"/>
        <files mask="dir_5a30104352ef4255dc24354b02eb2d20.html" hidden="true"/>
        <files mask="dir_97aefd0d527b934f1d99a682da8fe6a9.html" hidden="true"/>
        <files mask="doxygen.css" hidden="true"/>
        <files mask="group__config.html" hidden="true"/>
        <files mask="group__rpmsg__lite.html" hidden="true"/>
        <files mask="group__rpmsg__ns.html" hidden="true"/>
        <files mask="group__rpmsg__queue.html" hidden="true"/>
        <files mask="index.html" hidden="true"/>
        <files mask="modules.html" hidden="true"/>
        <files mask="navtree.css" hidden="true"/>
        <files mask="rpmsg__default__config_8h.html" hidden="true"/>
        <files mask="rpmsg__default__config_8h_source.html" hidden="true"/>
        <files mask="rpmsg__lite_8h_source.html" hidden="true"/>
        <files mask="rpmsg__ns_8h_source.html" hidden="true"/>
        <files mask="rpmsg__queue_8h_source.html" hidden="true"/>
        <files mask="tabs.css" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/doc" target_path="rpmsg_lite/doc" type="script">
        <files mask="dynsections.js" hidden="true"/>
        <files mask="group__config.js" hidden="true"/>
        <files mask="group__rpmsg__lite.js" hidden="true"/>
        <files mask="group__rpmsg__ns.js" hidden="true"/>
        <files mask="group__rpmsg__queue.js" hidden="true"/>
        <files mask="jquery.js" hidden="true"/>
        <files mask="modules.js" hidden="true"/>
        <files mask="navtree.js" hidden="true"/>
        <files mask="navtreedata.js" hidden="true"/>
        <files mask="navtreeindex0.js" hidden="true"/>
        <files mask="resize.js" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/doc/search" target_path="rpmsg_lite/doc" type="doc">
        <files mask="all_0.html" hidden="true"/>
        <files mask="all_1.html" hidden="true"/>
        <files mask="all_2.html" hidden="true"/>
        <files mask="all_3.html" hidden="true"/>
        <files mask="all_4.html" hidden="true"/>
        <files mask="all_5.html" hidden="true"/>
        <files mask="all_6.html" hidden="true"/>
        <files mask="all_7.html" hidden="true"/>
        <files mask="classes_0.html" hidden="true"/>
        <files mask="files_0.html" hidden="true"/>
        <files mask="functions_0.html" hidden="true"/>
        <files mask="groups_0.html" hidden="true"/>
        <files mask="nomatches.html" hidden="true"/>
        <files mask="pages_0.html" hidden="true"/>
        <files mask="search.css" hidden="true"/>
        <files mask="typedefs_0.html" hidden="true"/>
        <files mask="variables_0.html" hidden="true"/>
        <files mask="variables_1.html" hidden="true"/>
        <files mask="variables_2.html" hidden="true"/>
        <files mask="variables_3.html" hidden="true"/>
        <files mask="variables_4.html" hidden="true"/>
        <files mask="variables_5.html" hidden="true"/>
        <files mask="variables_6.html" hidden="true"/>
        <files mask="variables_7.html" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/doc/search" target_path="rpmsg_lite/doc" type="script">
        <files mask="all_0.js" hidden="true"/>
        <files mask="all_1.js" hidden="true"/>
        <files mask="all_2.js" hidden="true"/>
        <files mask="all_3.js" hidden="true"/>
        <files mask="all_4.js" hidden="true"/>
        <files mask="all_5.js" hidden="true"/>
        <files mask="all_6.js" hidden="true"/>
        <files mask="all_7.js" hidden="true"/>
        <files mask="classes_0.js" hidden="true"/>
        <files mask="files_0.js" hidden="true"/>
        <files mask="functions_0.js" hidden="true"/>
        <files mask="groups_0.js" hidden="true"/>
        <files mask="pages_0.js" hidden="true"/>
        <files mask="search.js" hidden="true"/>
        <files mask="searchdata.js" hidden="true"/>
        <files mask="typedefs_0.js" hidden="true"/>
        <files mask="variables_0.js" hidden="true"/>
        <files mask="variables_1.js" hidden="true"/>
        <files mask="variables_2.js" hidden="true"/>
        <files mask="variables_3.js" hidden="true"/>
        <files mask="variables_4.js" hidden="true"/>
        <files mask="variables_5.js" hidden="true"/>
        <files mask="variables_6.js" hidden="true"/>
        <files mask="variables_7.js" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/doc/search" target_path="rpmsg_lite/doc" type="image">
        <files mask="close.png" hidden="true"/>
        <files mask="mag_sel.png" hidden="true"/>
        <files mask="search_l.png" hidden="true"/>
        <files mask="search_m.png" hidden="true"/>
        <files mask="search_r.png" hidden="true"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/common" target_path="rpmsg_lite" type="src">
        <files mask="llist.c"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/include" target_path="rpmsg_lite" type="c_include">
        <files mask="llist.h"/>
        <files mask="rpmsg_compiler.h"/>
        <files mask="rpmsg_default_config.h"/>
        <files mask="rpmsg_lite.h"/>
        <files mask="rpmsg_ns.h"/>
        <files mask="virtio_ring.h"/>
        <files mask="virtqueue.h"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite" target_path="rpmsg_lite" type="src">
        <files mask="rpmsg_lite.c"/>
        <files mask="rpmsg_ns.c"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/virtio" target_path="rpmsg_lite" type="src">
        <files mask="virtqueue.c"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite" target_path="rpmsg_lite" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.bm.MIMX8QX6" name="rpmsg_lite_bm_env" brief="RPMsg-Lite_baremetal_env" version="3.1.0" full_name="RPMsg-Lite baremetal environment layer" devices="MIMX8QX6xxxFZ" category="Multicore/RPMsg-Lite BM" user_visible="false" type="middleware">
      <dependencies>
        <component_dependency value="middleware.multicore.rpmsg_lite.MIMX8QX6"/>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/lib/include" target_path="rpmsg_lite/env/bm" type="c_include">
        <files mask="rpmsg_env.h"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite/porting/environment" target_path="rpmsg_lite/env/bm" type="src">
        <files mask="rpmsg_env_bm.c"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.bm.config.MIMX8QX6" name="rpmsg_lite_bm_config" brief="RPMsg-Lite_bm_config" version="3.1.0" full_name="RPMsg-Lite BM configuration" devices="MIMX8QX6xxxFZ" category="Multicore/RPMsg-Lite BM" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.multicore.rpmsg_lite.MIMX8QX6"/>
          <component_dependency value="middleware.multicore.rpmsg_lite.bm.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/template_application" target_path="source" type="c_include">
        <files mask="rpmsg_config.h"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.freertos.MIMX8QX6" name="rpmsg_lite_freertos_env" brief="RPMsg-Lite_freertos_env" version="3.1.0" full_name="RPMsg-Lite FreeRTOS environment layer" devices="MIMX8QX6xxxFZ" category="Multicore/RPMsg-Lite FreeRTOS" user_visible="false" type="middleware">
      <dependencies>
        <component_dependency value="middleware.multicore.rpmsg_lite.MIMX8QX6"/>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/lib/include" target_path="rpmsg_lite/env/freertos" type="c_include">
        <files mask="rpmsg_env.h"/>
        <files mask="rpmsg_queue.h"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite/porting/environment" target_path="rpmsg_lite/env/freertos" type="src">
        <files mask="rpmsg_env_freertos.c"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite" target_path="rpmsg_lite/env/freertos" type="src">
        <files mask="rpmsg_queue.c"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.freertos.config.MIMX8QX6" name="rpmsg_lite_freertos_config" brief="RPMsg-Lite_freertos_config" version="3.1.0" full_name="RPMsg-Lite FreeRTOS configuration" devices="MIMX8QX6xxxFZ" category="Multicore/RPMsg-Lite FreeRTOS" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.multicore.rpmsg_lite.MIMX8QX6"/>
          <component_dependency value="middleware.multicore.rpmsg_lite.freertos.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/template_application" target_path="source" type="c_include">
        <files mask="rpmsg_config.h"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.imx8qx_m4_bm.MIMX8QX6" name="rpmsg_lite_imx8qx_m4_bm" brief="RPMsg-Lite_imx8qx_porting_layer" version="3.1.0" full_name="Remote Procedure Messaging Lite porting layer for MIMX8QX6 board" devices="MIMX8QX6xxxFZ" category="Multicore/RPMsg-Lite BM" user_visible="true" type="middleware">
      <dependencies>
        <component_dependency value="middleware.multicore.rpmsg_lite.bm.MIMX8QX6"/>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/lib/include/platform/imx8qx_cm4" target_path="rpmsg_lite/porting" type="c_include">
        <files mask="rpmsg_platform.h"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite/porting/platform/imx8qx_cm4" target_path="rpmsg_lite/porting" type="src">
        <files mask="rpmsg_platform.c"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.imx8qx_m4_freertos.MIMX8QX6" name="rpmsg_lite_imx8qx_m4_freertos" brief="RPMsg-Lite_imx8qx_porting_layer" version="3.1.0" full_name="Remote Procedure Messaging Lite porting layer for MIMX8QX6 board" devices="MIMX8QX6xxxFZ" category="Multicore/RPMsg-Lite FreeRTOS" user_visible="true" type="middleware">
      <dependencies>
        <all>
          <component_dependency value="middleware.multicore.rpmsg_lite.freertos.MIMX8QX6"/>
          <component_dependency value="middleware.freertos-kernel.MIMX8QX6"/>
          <component_dependency value="middleware.freertos-kernel.heap_4.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="middleware/multicore/rpmsg_lite/lib/include/platform/imx8qx_cm4" target_path="rpmsg_lite/porting" type="c_include">
        <files mask="rpmsg_platform.h"/>
      </source>
      <source path="middleware/multicore/rpmsg_lite/lib/rpmsg_lite/porting/platform/imx8qx_cm4" target_path="rpmsg_lite/porting" type="src">
        <files mask="rpmsg_platform.c"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MIMX8QX6" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="MIMX8QX6xxxFZ" user_visible="true" type="utilities">
      <source toolchain="armgcc" path="devices/MIMX8QX6/utilities" target_path="utilities" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MIMX8QX6" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MIMX8QX6" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MIMX8QX6"/>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MIMX8QX6/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source path="devices/MIMX8QX6/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MIMX8QX6/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.MIMX8QX6" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QX6"/>
      </dependencies>
      <source path="devices/MIMX8QX6/utilities" target_path="utilities/utilities" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source path="devices/MIMX8QX6/utilities" target_path="utilities/utilities" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
    </component>
    <component id="utility.shell.MIMX8QX6" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="MIMX8QX6xxxFZ" device_cores="cm4_MIMX8QX6xxxFZ" user_visible="true" type="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MIMX8QX6"/>
          <component_dependency value="component.lists.MIMX8QX6"/>
          <component_dependency value="platform.drivers.common.MIMX8QX6"/>
        </all>
      </dependencies>
      <source path="devices/MIMX8QX6/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/MIMX8QX6/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
  </components>
</ksdk:manifest>
